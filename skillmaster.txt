//app.js
import React from 'react';
import { BrowserRouter as Router, Route, Routes, Link } from 'react-router-dom';
import { Drawer, List, ListItem, ListItemText, Collapse, Divider, CssBaseline, Box } from '@mui/material';
import { ExpandLess, ExpandMore } from '@mui/icons-material';
import { createTheme, ThemeProvider, styled } from '@mui/material/styles';
import StageMaster from './components/StageMaster';
import SkillMaster from './components/SkillMaster';
import UserSkills from './components/UserSkills';
import UserShiftRoster from './components/UserShiftRoster';

const drawerWidth = 200; // Adjust the drawer width

const darkDrawerTheme = createTheme({
  components: {
    MuiDrawer: {
      styleOverrides: {
        paper: {
          backgroundColor: '#333',
          color: '#fff',
        },
      },
    },
  },
});

const MainContent = styled('main')(({ theme }) => ({
  flexGrow: 1,
  padding: theme.spacing(3),
  backgroundColor: '#f0f0f0', // Light background for the main content
  marginLeft: 0,
  minHeight: '100vh',
}));

const App = () => {
  const [open, setOpen] = React.useState(false);

  const handleClick = () => {
    setOpen(!open);
  };

  return (
    <ThemeProvider theme={darkDrawerTheme}>
      <CssBaseline />
      <Router>
        <div style={{ display: 'flex' }}>
          <Drawer
            variant="permanent"
            anchor="left"
            sx={{
              width: drawerWidth,
              flexShrink: 0,
              '& .MuiDrawer-paper': {
                width: drawerWidth,
                boxSizing: 'border-box',
              },
            }}
          >
            <Box sx={{ textAlign: 'center', my: 2 }}>
              <img src="/path-to-your-logo.png" alt="Logo" style={{ width: '80%', margin: '0 auto' }} />
            </Box>
            <Divider />
            <List>
              <ListItem button onClick={handleClick}>
                <ListItemText primary="Master" />
                {open ? <ExpandLess /> : <ExpandMore />}
              </ListItem>
              <Collapse in={open} timeout="auto" unmountOnExit>
                <List component="div" disablePadding>
                  <ListItem button component={Link} to="/stage-master">
                    <ListItemText primary="Stage Master" />
                  </ListItem>
                  <ListItem button component={Link} to="/skill-master">
                    <ListItemText primary="Skill Master" />
                  </ListItem>
                </List>
              </Collapse>
              <Divider />
              <ListItem button component={Link} to="/user-skills">
                <ListItemText primary="User Skills" />
              </ListItem>
              <ListItem button component={Link} to="/user-shift-roster">
                <ListItemText primary="User Shift Roster" />
              </ListItem>
            </List>
          </Drawer>
          <MainContent>
            <Routes>
              <Route path="/stage-master" element={<StageMaster />} />
              <Route path="/skill-master" element={<SkillMaster />} />
              <Route path="/user-skills" element={<UserSkills />} />
              <Route path="/user-shift-roster" element={<UserShiftRoster />} />
            </Routes>
          </MainContent>
        </div>
      </Router>
    </ThemeProvider>
  );
};

export default App;

//Stage Master

import React, { useEffect, useState } from 'react';
import axios from 'axios';

const StageMaster = () => {
  const [stages, setStages] = useState([]);
  const [newStage, setNewStage] = useState({ Stage_name: '' });
  const [notification, setNotification] = useState('');
  const [editingStage, setEditingStage] = useState(null);
  const [searchTerm, setSearchTerm] = useState('');

  useEffect(() => {
    fetchData();
  }, []);

  const fetchData = async () => {
    try {
      const response = await axios.get('http://localhost:5000/api/stage-master');
      setStages(response.data);
    } catch (error) {
      console.error('Error fetching stage data:', error);
    }
  };

  const handleChange = (e) => {
    const { name, value } = e.target;
    setNewStage({ ...newStage, [name]: value });
  };

  const handleSearchChange = (e) => {
    setSearchTerm(e.target.value);
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    if (editingStage) {
      updateStage();
    } else {
      addStage();
    }
  };

  const addStage = async () => {
    try {
      const response = await axios.post('http://localhost:5000/api/stage-master', newStage);
      setStages([...stages, response.data]);
      setNewStage({ Stage_name: '' });
      setNotification('Stage added successfully');
    } catch (error) {
      if (error.response && error.response.status === 409) {
        setNotification('Stage Name already exists');
      } else {
        setNotification('Error adding stage');
      }
    } finally {
      setTimeout(() => setNotification(''), 3000);
    }
  };

  const updateStage = async () => {
    try {
      const response = await axios.put(`http://localhost:5000/api/stage-master/${editingStage.Stage_id}`, newStage);
      const updatedStages = stages.map(stage =>
        stage.Stage_id === editingStage.Stage_id ? response.data : stage
      );
      setStages(updatedStages);
      setNewStage({ Stage_name: '' });
      setEditingStage(null);
      setNotification('Stage updated successfully');
    } catch (error) {
      setNotification('Error updating stage');
    } finally {
      setTimeout(() => setNotification(''), 3000);
    }
  };

  const editStage = (stage) => {
    setNewStage({ Stage_name: stage.Stage_name });
    setEditingStage(stage);
  };

  const cancelEdit = () => {
    setNewStage({ Stage_name: '' });
    setEditingStage(null);
  };

  const formStyle = {
    marginBottom: '20px',
    padding: '20px',
    border: '1px solid #ccc',
    borderRadius: '10px',
    backgroundColor: '#e3f2fd', // Light blue background
    width: '550px',
    boxShadow: '0px 4px 10px rgba(0, 0, 0, 0.1)', // Subtle shadow
  };
  
  const inputStyle = {
    marginBottom: '10px',
    padding: '10px',
    width: '100%',
    boxSizing: 'border-box',
    borderRadius: '20px', // More rounded text field
    border: '1px solid #ccc',
    outline: 'none',
    fontSize: '16px',
    boxShadow: 'inset 0px 2px 4px rgba(0, 0, 0, 0.1)', // Inner shadow for depth
  };
  
  const buttonStyle = {
    padding: '12px 20px',
    backgroundColor: '#212F3D', // Modern color for button
    color: '#fff',
    border: 'none',
    borderRadius: '25px', // Fully rounded button
    cursor: 'pointer',
    fontSize: '16px',
    transition: 'background-color 0.3s ease',
    outline: 'none',
  };
  
  const tableStyle = {
    width: '100%',
    borderCollapse: 'collapse',
    boxShadow: '0px 4px 10px rgba(0, 0, 0, 0.1)', // Table shadow
  };
  
  const thStyle = {
    borderBottom: '2px solid #ddd',
    padding: '15px',
    textAlign: 'left',
    backgroundColor: '#1F618D', // Header background color
    color: '#fff',
    fontSize: '18px',
  };
  
  const tdStyle = {
    borderBottom: '1px solid #ddd',
    padding: '15px',
    fontSize: '16px',
  };
  
  const searchStyle = {
    marginBottom: '20px',
    padding: '12px 20px',
    width: '300px',
    float: 'right',
    borderRadius: '25px', // Fully rounded search field
    border: '1px solid #ccc',
    boxShadow: '0px 4px 10px rgba(0, 0, 0, 0.1)', // Subtle shadow
    outline: 'none',
    fontSize: '16px',
    transition: 'box-shadow 0.3s ease',
  };

  const filteredStages = stages.filter(stage =>
    stage.Stage_name.toLowerCase().includes(searchTerm.toLowerCase())
  );

  return (
    <div>
      <h1>Stage Master</h1>
      <input
        type="text"
        placeholder="Search Stage Name..."
        value={searchTerm}
        onChange={handleSearchChange}
        style={searchStyle}
      />
      <form onSubmit={handleSubmit} style={formStyle}>
        <div>
          <label>Stage Name:</label>
          <input
            type="text"
            name="Stage_name"
            value={newStage.Stage_name}
            onChange={handleChange}
            style={inputStyle}
            required
          />
        </div>
        <button type="submit" style={buttonStyle}>
          {editingStage ? 'Update Stage' : 'Add Stage'}
        </button>
        {editingStage && (
          <button type="button" onClick={cancelEdit} style={{ ...buttonStyle, backgroundColor: '#6c757d', marginLeft: '10px' }}>
            Cancel
          </button>
        )}
      </form>

      <table style={tableStyle}>
        <thead>
          <tr>
            <th style={thStyle}>Stage ID</th>
            <th style={thStyle}>Stage Name</th>
            <th style={thStyle}>Actions</th>
          </tr>
        </thead>
        <tbody>
          {filteredStages.map((stage) => (
            <tr key={stage.Stage_id}>
              <td style={tdStyle}>{stage.Stage_id}</td>
              <td style={tdStyle}>{stage.Stage_name}</td>
              <td style={tdStyle}>
                <button onClick={() => editStage(stage)} style={buttonStyle}>Edit</button>
              </td>
            </tr>
          ))}
        </tbody>
      </table>

      {notification && (
        <div style={{
          backgroundColor: '#4CAF50',
          color: 'white',
          textAlign: 'center',
          padding: '10px',
          position: 'fixed',
          top: '10px',
          left: '50%',
          transform: 'translateX(-50%)',
          zIndex: '1',
        }}>
          {notification}
        </div>
      )}
    </div>
  );
};

export default StageMaster;



//Skill Master
import React, { useState, useEffect } from 'react';
import axios from 'axios';

const SkillMaster = () => {
  const [skills, setSkills] = useState([]);
  const [skill, setSkill] = useState({
    Skill_Rating: '',
    Skill_Description: ''
  });
  const [notification, setNotification] = useState('');
  const [editingSkill, setEditingSkill] = useState(null);
  const [searchTerm, setSearchTerm] = useState('');
  const [loading, setLoading] = useState(false);

  useEffect(() => {
    fetchData();
  }, []);

  const fetchData = async () => {
    try {
      setLoading(true);
      const response = await axios.get('http://localhost:5000/api/skill-master');
      setSkills(response.data);
    } catch (error) {
      console.error('Error fetching skills:', error);
      setNotification('Error fetching skills');
    } finally {
      setLoading(false);
    }
  };

  const handleChange = (e) => {
    const { name, value } = e.target;
    setSkill({ ...skill, [name]: value });
  };

  const handleSearchChange = (e) => {
    setSearchTerm(e.target.value);
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      if (editingSkill) {
        await updateSkill();
      } else {
        await addSkill();
      }
    } catch (error) {
      console.error('Error submitting skill:', error);
      setNotification('Error submitting skill');
    }
  };

  const addSkill = async () => {
    try {
      setLoading(true);
      const response = await axios.post('http://localhost:5000/api/skill-master', skill);
      setSkills([...skills, response.data]);
      setSkill({ Skill_Rating: '', Skill_Description: '' });
      setNotification('Skill added successfully');
    } catch (error) {
      console.error('Error adding skill:', error);
      setNotification('Error adding skill');
    } finally {
      setLoading(false);
      setTimeout(() => setNotification(''), 3000);
    }
  };

  const updateSkill = async () => {
    try {
      setLoading(true);
      const response = await axios.put(`http://localhost:5000/api/skill-master/${editingSkill.Skill_id}`, skill);
      const updatedSkills = skills.map(s => (s.Skill_id === editingSkill.Skill_id ? response.data : s));
      setSkills(updatedSkills);
      setSkill({ Skill_Rating: '', Skill_Description: '' });
      setEditingSkill(null);
      setNotification('Skill updated successfully');
    } catch (error) {
      console.error('Error updating skill:', error);
      setNotification('Error updating skill');
    } finally {
      setLoading(false);
      setTimeout(() => setNotification(''), 3000);
    }
  };

  const editSkill = (selectedSkill) => {
    setSkill({ Skill_Rating: selectedSkill.Skill_Rating, Skill_Description: selectedSkill.Skill_Description });
    setEditingSkill(selectedSkill);
  };

  const cancelEdit = () => {
    setSkill({ Skill_Rating: '', Skill_Description: '' });
    setEditingSkill(null);
  };

  const getRatingLabel = (rating) => {
    switch (rating) {
      case '1':
        return 'Poor';
      case '2':
        return 'Fair';
      case '3':
        return 'Good';
      case '4':
        return 'Very Good';
      case '5':
        return 'Excellent';
      default:
        return 'Unknown';
    }
  };

  const filteredSkills = skills.filter(skill =>
    skill.Skill_Description.toLowerCase().includes(searchTerm.toLowerCase())
  );

  const formStyle = {
    marginBottom: '20px',
    padding: '20px',
    border: '1px solid #ccc',
    borderRadius: '10px',
    backgroundColor: '#e3f2fd', // Light blue background
    width: '550px',
    boxShadow: '0px 4px 10px rgba(0, 0, 0, 0.1)', // Subtle shadow
  };

  const inputStyle = {
    marginBottom: '10px',
    padding: '10px',
    width: '100%',
    boxSizing: 'border-box',
    borderRadius: '20px', // More rounded text field
    border: '1px solid #ccc',
    outline: 'none',
    fontSize: '16px',
    boxShadow: 'inset 0px 2px 4px rgba(0, 0, 0, 0.1)', // Inner shadow for depth
  };

  const buttonStyle = {
    padding: '12px 20px',
    backgroundColor: '#212F3D', // Modern color for button
    color: '#fff',
    border: 'none',
    borderRadius: '25px', // Fully rounded button
    cursor: 'pointer',
    fontSize: '16px',
    transition: 'background-color 0.3s ease',
    outline: 'none',
  };

  const tableStyle = {
    width: '100%',
    borderCollapse: 'collapse',
    boxShadow: '0px 4px 10px rgba(0, 0, 0, 0.1)', // Table shadow
  };

  const thStyle = {
    borderBottom: '2px solid #ddd',
    padding: '15px',
    textAlign: 'left',
    backgroundColor: '#1F618D', // Header background color
    color: '#fff',
    fontSize: '18px',
  };

  const tdStyle = {
    borderBottom: '1px solid #ddd',
    padding: '15px',
    fontSize: '16px',
  };

  const searchStyle = {
    marginBottom: '20px',
    padding: '12px 20px',
    width: '300px',
    float: 'right',
    borderRadius: '25px', // Fully rounded search field
    border: '1px solid #ccc',
    boxShadow: '0px 4px 10px rgba(0, 0, 0, 0.1)', // Subtle shadow
    outline: 'none',
    fontSize: '16px',
    transition: 'box-shadow 0.3s ease',
  };

  return (
    <div>
      <h1>Skill Master</h1>
      <input
        type="text"
        placeholder="Search Skill..."
        value={searchTerm}
        onChange={handleSearchChange}
        style={searchStyle}
      />
      <form onSubmit={handleSubmit} style={formStyle}>
        <div>
          <label>Skill Rating:</label>
          <select
            name="Skill_Rating"
            value={skill.Skill_Rating}
            onChange={handleChange}
            style={inputStyle}
            required
          >
            <option value="">Select Rating</option>
            <option value="1">1</option>
            <option value="2">2</option>
            <option value="3">3</option>
            <option value="4">4</option>
            <option value="5">5</option>
          </select>
        </div>
        <div>
          <label>Skill Description:</label>
          <input
            type="text"
            name="Skill_Description"
            value={skill.Skill_Description}
            onChange={handleChange}
            style={inputStyle}
            required
          />
        </div>
        <button type="submit" style={buttonStyle} disabled={loading}>
          {editingSkill ? 'Update Skill' : 'Add Skill'}
        </button>
        {editingSkill && (
          <button type="button" onClick={cancelEdit} style={{ ...buttonStyle, backgroundColor: '#6c757d', marginLeft: '10px' }}>
            Cancel
          </button>
        )}
      </form>

      <table style={tableStyle}>
        <thead>
          <tr>
            <th style={thStyle}>Skill ID</th>
            <th style={thStyle}>Skill Rating</th>
            <th style={thStyle}>Skill Description</th>
            <th style={thStyle}>Actions</th>
          </tr>
        </thead>
        <tbody>
          {filteredSkills.map((skill) => (
            <tr key={skill.Skill_id}>
              <td style={tdStyle}>{skill.Skill_id}</td>
              <td style={tdStyle}>{getRatingLabel(skill.Skill_Rating)}</td>
              <td style={tdStyle}>{skill.Skill_Description}</td>
              <td style={tdStyle}>
                <button onClick={() => editSkill(skill)} style={buttonStyle}>Edit</button>
              </td>
            </tr>
          ))}
        </tbody>
      </table>

      {notification && (
        <div style={{
          backgroundColor: '#4CAF50',
          color: 'white',
          textAlign: 'center',
          padding: '10px',
          position: 'fixed',
          top: '10px',
          left: '50%',
          transform: 'translateX(-50%)',
          zIndex: '1',
        }}>
          {notification}
        </div>
      )}
    </div>
  );
};

export default SkillMaster;

//server

const express = require('express');
const cors = require('cors');
const sql = require('mssql');
const app = express();
const port = process.env.PORT || 5000;

app.use(cors());
app.use(express.json());

const config = {
  user: 'mss',
  password: 'Mss@Sa',
  server: '103.38.50.73',
  database: 'COSEC',
  port: 3141,
  options: {
    trustedConnection: true,
    trustServerCertificate: true,
    useUTC: true,
    enableArithAbort: true,
    encrypt: false,
    driver: 'msnodesqlv8'
  },
};

// Insert a new stage
app.post('/api/stage-master', async (req, res) => {
  const { Stage_name } = req.body;

  if (!Stage_name) {
    return res.status(400).send('Stage_name is required');
  }

  try {
    const pool = await sql.connect(config);
    const request = pool.request();
    request.input('Stage_name', sql.NVarChar, Stage_name);
    const result = await request.query('INSERT INTO Mx_StageMaster (Stage_name) OUTPUT INSERTED.Stage_id VALUES (@Stage_name)');
    sql.close();
    res.status(201).json({ Stage_id: result.recordset[0].Stage_id, Stage_name: Stage_name, message: 'Stage inserted successfully' });
  } catch (err) {
    res.status(500).send(err.message);
  }
});

// Fetch all stages
app.get('/api/stage-master', async (req, res) => {
  try {
    const pool = await sql.connect(config);
    const result = await pool.request().query('SELECT Stage_id, Stage_name FROM Mx_StageMaster');
    sql.close();
    res.json(result.recordset);
  } catch (err) {
    res.status(500).send(err.message);
  }
});

// Update a stage
app.put('/api/stage-master/:id', async (req, res) => {
  const { id } = req.params;
  const { Stage_name } = req.body;

  if (!Stage_name) {
    return res.status(400).send('Stage_name is required');
  }

  try {
    const pool = await sql.connect(config);
    const request = pool.request();
    request.input('Stage_id', sql.Int, id);
    request.input('Stage_name', sql.NVarChar, Stage_name);
    const result = await request.query('UPDATE Mx_StageMaster SET Stage_name = @Stage_name WHERE Stage_id = @Stage_id');
    sql.close();
    res.status(200).json({ Stage_id: id, Stage_name: Stage_name, message: 'Stage updated successfully' });
  } catch (err) {
    res.status(500).send(err.message);
  }
});

//Skill Master

const addSkill = async (Skill_Rating, Skill_Description) => {
  try {
    const pool = await poolPromise;
    const request = pool.request();
    request.input('Skill_Rating', sql.Char, Skill_Rating);
    request.input('Skill_Description', sql.NVarChar, Skill_Description);
    const result = await request.query(`
      INSERT INTO Mx_SkillMaster (Skill_Rating, Skill_Description)
      VALUES (@Skill_Rating, @Skill_Description);
    `);
    return result.recordset[0]; // Optionally return the inserted skill ID or other data
  } catch (error) {
    console.error('Error adding skill:', error);
    throw error; // Handle error in the caller function
  }
};

const updateSkill = async (Skill_id, Skill_Rating, Skill_Description) => {
  try {
    const pool = await poolPromise;
    const request = pool.request();
    request.input('Skill_id', sql.Int, Skill_id);
    request.input('Skill_Rating', sql.Char, Skill_Rating);
    request.input('Skill_Description', sql.NVarChar, Skill_Description);
    const result = await request.query(`
      UPDATE Mx_SkillMaster
      SET Skill_Rating = @Skill_Rating,
          Skill_Description = @Skill_Description
      WHERE Skill_id = @Skill_id;
    `);
    return result.rowsAffected[0]; // Optionally return the number of rows affected
  } catch (error) {
    console.error('Error updating skill:', error);
    throw error; // Handle error in the caller function
  }
};

const getSkillById = async (Skill_id) => {
  try {
    const pool = await poolPromise;
    const request = pool.request();
    request.input('Skill_id', sql.Int, Skill_id);
    const result = await request.query(`
      SELECT Skill_id, Skill_Rating, Skill_Description
      FROM Mx_SkillMaster
      WHERE Skill_id = @Skill_id;
    `);
    return result.recordset[0]; // Return the fetched skill object
  } catch (error) {
    console.error('Error fetching skill:', error);
    throw error; // Handle error in the caller function
  }
};

// Start the server
app.listen(port, () => {
  console.log(`Server is running on port ${port}`);
});

